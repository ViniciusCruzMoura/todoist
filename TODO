
SGR, migrate the crednet service implementation to v2

Migrate to sp3 server
SP3 migration, create a portainer volume and deploy the portainer, setting the auth and the cardway logo,
    make a directory on jdedv home called workspace, to storage the docker composes files,
    create the dozzel master and slave compose, a deploy the dozzle, and check if the
        port 9009 is blocked by the firewall, otherwise call the vismar or juliano,
    check the port 50000, 8080, 8000, 80, 9000 to 9015,
    check the oracle connection, sgr external dns and integrati internal dns
    check the jde, complience and ftp connections
SP3 migration, check how to use the jenkins without docker layer, 
    create the jenkins compose to deploy, 
    make a diretory inside the workspace to stored the environment variables of the apps,
    set credetials inside the jenkins, set pipeline
SP3 migration, botpress v12

On the cardterminais, build a function that insert errors in 'ADM_SGV_JDE.LOG_SGV_ERR' table
    make a monitoring task that check every day as 6 o'clock if there a d-1 register on the table
    use the same structer already created on the tasks package

On the cardterminais, exception in production environment.
[2025-02-27 16:39:00 -0400] [15] [DEBUG] GET /card_terminais/api/v1/workfinity/os/abrir
Traceback (most recent call last):
  File "/usr/src/apps/terminal_android/views/ordem_avulsa.py", line 43, in abrir_ordem_de_servico_avulsa
    detalhe = ordem_avulsa_abrir(cliente.get('id'),
  File "/usr/src/apps/terminal_android/modules/ordem_avulsa.py", line 83, in ordem_avulsa_abrir
    protocolo = registrar_em_um_protocolo(pdv, empresa, ordem_servico)
  File "/usr/src/apps/terminal_android/modules/ordem_avulsa.py", line 63, in registrar_em_um_protocolo
    finalizar_protocolo_no_sgr(protocolo.get('detalhe')['solicitacao']['chamado']['protocolo'])
'NoneType' object is not subscriptable
TypeError: 'NoneType' object is not subscriptable
192.168.16.3 - - [27/Feb/2025:16:39:13 -0400] "
GET /card_terminais/api/v1/workfinity/os/abrir?eeid=1270580&tipo=Credenciamento+novo&motivo=instala%C3%A7%C3%A3o+de+uma+pos+adicional+
HTTP/1.0" 500 86 "-" "python-requests/2.32.3"

On the cardterminais, extract the send email logic from view. Run the
following command to find where need change.
    grep -n "enviar_comprovante_de_aceite_via_email(.*" apps/terminal_android/views/remessa.py
Refactor these implementations.

On the cardcredenciamento, extract 'fases' function to a separate file. Run the 
following command to get the list of functions.
    grep -n "def.*fases.*(.*):" apps/recarga/modules/funcoes.py
Then run each function with django shell and check the behavior.
    python manage.py shell << EOF
    from apps.recarga.modules.funcoes import *
    print( buscar_fases_do_credenciamento("99584557068", "03457654000") )
    print( buscar_fases_do_credenciamento_por_cliente("99584557068") )
    EOF
Refactor these uses by moving to a new modules file and change the imports in all source code.

On the cardcredenciamento, extract functions about 'serasa', 'receita' and 'sefaz' to a own file. 
Run the following command to get the list of functions.
    grep -n -e "def.*receita" -e "def.*sefaz" -e "def.*serasa" apps/recarga/modules/funcoes.py
Then run each function with django shell and check the behavior.
    python manage.py shell << EOF
    from apps.recarga.modules.funcoes import *
    print( pegar_data_constituicao_receita("97441216000124") )
    EOF
Refactor these uses by moving to a new modules file and change the imports in all source code.

On the cardcredenciamento, avoid nested ifs of 'estabelecimentos_info' variable. Run the 
following command to get the list of functions.
    grep -rn --include=*.py "def buscar_cliente_id(.*):"

On the cardconnect, remove the environment variable not used in the 'docker-compose.yml'
and 'settings.py'. Run the following command to get the list of environment variable.
    echo "$PWD/core/settings.py:"
    for line in $(cat .env.example); do
        grep -n "${line//=/\',}" core/settings.py
    done
    echo "$PWD/docker-compose.yml:"
    for line in $(cat .env.example); do
         grep -n "${line//=/}" docker-compose.yml
    done
Then delete the unused variable and test the apis inside the docker container.
    docker build --network=host -t $(basename $PWD) .
    docker run -it --rm --network=host --env-file .env --name $(basename $PWD) \
        -v "$PWD":/"$(basename $PWD)" -w /"$(basename $PWD)" $(basename $PWD) bash
Fix these uses by change environment variable values.

On the cardterminais, refactoring code of generated protocol in response,
    before the request ending for client without wkf, extract to small function

